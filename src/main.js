#!/usr/bin/env node

'use strict';

const fs = require('fs-extra');
const path = require('path');
const yaml = require('js-yaml');

function loadConfig(argv) {
  let config = {};
  try {
    config = yaml.safeLoad(fs.readFileSync(path.join(argv.input, '.anodize.yml'), 'utf8'));
  } catch (e) {
    console.log('WARNING: .anodize.yml missing or invalid, using default options...');
  }
  /* eslint-disable no-param-reassign */
  // args that are overridable on the command line
  argv.source = argv.source || config.source || 'src';
  argv.target = argv.target || config.target || 'gen';
  argv.template = argv.template || config.template || 'template';
  argv.ignore = argv.ignore || config.ignore || ['**/.*'];
  argv.indexify = argv.indexify || config.indexify || false;
  // args that can only be specified in .anodize.yml
  argv.icon = config.icon;
  argv.global = config.global || {};
  argv.head = config.head || {};
  argv.head.charset = argv.head.charset || 'utf-8';
  argv.head.raw = argv.head.raw || [];
  argv.head.title = argv.head.title || 'Welcome to Anodize!';
  argv.head.description = argv.head.description || 'A website generated by Anodize, a minimalist static site generator.';

  argv.path = {
    source: path.join(argv.input, argv.source),
    target: path.join(argv.input, argv.target),
    yaml: path.join(argv.input, '.anodize.yml'),
    template: path.join(argv.input, argv.template),
  };

  if (argv.source === argv.target) {
    throw new Error('ERROR: source and target are same directory. stop.');
  }
}

const yargs = require('yargs')
  .option('working-dir', {
    alias: ['input', 'i'],
    describe: 'Set the working directory',
    default: '.',
  })
  .option('source', {
    alias: ['s'],
    describe: 'The directory containing source files',
  })
  .option('target', {
    alias: ['t'],
    describe: 'The directory in which to store generated files',
  })
  .option('template', {
    describe: 'The directory containing template files',
  })
  .option('ignore', {
    describe: 'Ignore files matching glob patterns',
    array: true,
  })
  .middleware([(argv) => {
    loadConfig(argv);
  }])
  .commandDir('commands')
  .argv;

const run = require('./commands/run');
const watch = require('./commands/watch');

module.exports = {
  run(argv = { input: '.' }) {
    loadConfig(argv);
    run.handler(argv);
  },
  watch(argv = { input: '.' }) {
    loadConfig(argv);
    watch.handler(argv);
  },
};
